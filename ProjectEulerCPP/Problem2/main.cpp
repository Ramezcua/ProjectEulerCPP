/* Created by Ricco Amezcua
 * May 12, 2013
 *
 * Project Euler
 * Problem 2: 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 */

#include <iostream>
using namespace std;

const unsigned int LARGEST_FIB = 4000000;

int main (int argc, char * const argv[]) {

	unsigned int sum_even_fib_num;
	unsigned int current_fib_num;
	unsigned int prev_fib_num;
	unsigned int prev_fib_num2;
	
	sum_even_fib_num = 0;
	prev_fib_num = 1;
	prev_fib_num2 = 1;
	current_fib_num = prev_fib_num + prev_fib_num2;
	
	while (current_fib_num < LARGEST_FIB) {
		// Sum up the previous two terms
		current_fib_num = prev_fib_num + prev_fib_num2;
		
		// Check for evenness
		if (current_fib_num % 2 == 0) {
			sum_even_fib_num += current_fib_num;
		}
		
		// Update previous values
		prev_fib_num2 = prev_fib_num;
		prev_fib_num = current_fib_num;
	}
	
	cout << "The sum of all even fib numbers below " << LARGEST_FIB << " is " << sum_even_fib_num;
	
	
    return 0;
}
